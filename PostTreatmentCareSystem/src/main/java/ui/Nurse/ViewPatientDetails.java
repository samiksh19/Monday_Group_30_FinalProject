/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.Nurse;

/**
 *
 * @author prach
 */
public class ViewPatientDetails extends javax.swing.JPanel {

    /**
     * Creates new form ViewPatientDetails
     */
    public ViewPatientDetails() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
//    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblSuppliers = new javax.swing.JLabel();
        SuppliersComboBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        lblPatient = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        PatientHistoryTable = new javax.swing.JTable();
        addToCartBtn = new javax.swing.JButton();

        lblSuppliers.setFont(new java.awt.Font("Century", 1, 14)); // NOI18N
        lblSuppliers.setForeground(new java.awt.Color(51, 51, 51));
        lblSuppliers.setText("Patient List");

        SuppliersComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SuppliersComboBoxActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        jLabel1.setText("View All Patients");

        lblPatient.setFont(new java.awt.Font("Century", 1, 14)); // NOI18N
        lblPatient.setForeground(new java.awt.Color(51, 51, 51));
        lblPatient.setText("Patient");

        PatientHistoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Floor", "Ceiling", "Target"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        PatientHistoryTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                PatientHistoryTableMouseEntered(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                PatientHistoryTableMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(PatientHistoryTable);

        addToCartBtn.setBackground(new java.awt.Color(255, 102, 102));
        addToCartBtn.setFont(new java.awt.Font("Constantia", 1, 14)); // NOI18N
        addToCartBtn.setForeground(new java.awt.Color(255, 255, 255));
        addToCartBtn.setText("Change Status ");
        addToCartBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToCartBtnAddProductItemActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblSuppliers, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(SuppliersComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(addToCartBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(245, 245, 245)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(19, 19, 19)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 860, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSuppliers)
                    .addComponent(SuppliersComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addComponent(lblPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addToCartBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(240, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void SuppliersComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SuppliersComboBoxActionPerformed
        // TODO add your handling code here:
      //  refreshSupplierProductCatalogTable();
    }//GEN-LAST:event_SuppliersComboBoxActionPerformed

    private void PatientHistoryTableMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PatientHistoryTableMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_PatientHistoryTableMouseEntered

    private void PatientHistoryTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PatientHistoryTableMousePressed
        // TODO add your handling code here:
//        int suppliertablesize = PatientHistoryTable.getRowCount();
//        int selectedrow = PatientHistoryTable.getSelectionModel().getLeadSelectionIndex();
//
//        if (selectedrow < 0 || selectedrow > suppliertablesize - 1) {
//            return;
//        }
//        selectedproduct = (Product) PatientHistoryTable.getValueAt(selectedrow, 0);
//        if (selectedproduct == null) {
//            return;
//        }
//
//        ProductSummary productsummary = new ProductSummary(selectedproduct);
//
//        productNameTextField.setText(selectedproduct.toString());
//        String revenues = String.valueOf(productsummary.getSalesRevenues());
//        productRevenueTextField.setText(revenues);
//        productFrequencyAboveTargetTextField.setText(String.valueOf(productsummary.getNumberAboveTarget()));
//        productFrequencyBelowTargetTextField.setText(String.valueOf(productsummary.getNumberBelowTarget()));
//        productPricePerformanceTextField.setText(String.valueOf(productsummary.getProductPricePerformance()));
    }//GEN-LAST:event_PatientHistoryTableMousePressed

    private void addToCartBtnAddProductItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToCartBtnAddProductItemActionPerformed
        // TODO add your handling code here:

//        int suppliertablesize = PatientHistoryTable.getRowCount();
//        int selectedrow = PatientHistoryTable.getSelectionModel().getLeadSelectionIndex();
//
//        if (selectedrow < 0 || selectedrow > suppliertablesize - 1) {
//            JOptionPane.showMessageDialog(this, "Please select a product from the supplier catalog.");
//            return;
//        }
//
//        // Get the selected product
//        Product selectedproduct = (Product) PatientHistoryTable.getValueAt(selectedrow, 0);
//        if (selectedproduct == null) {
//            JOptionPane.showMessageDialog(this, "Selected product is invalid.");
//            return;
//        }
//
//        try {
//            // Prompt the user for actual price
//            String priceInput = JOptionPane.showInputDialog(this, "Enter Actual Price:");
//            if (priceInput == null || priceInput.isEmpty()) {
//                JOptionPane.showMessageDialog(this, "Actual price is required.");
//                return;
//            }
//            int actualPrice = Integer.parseInt(priceInput);
//
//            // Prompt the user for quantity
//            String quantityInput = JOptionPane.showInputDialog(this, "Enter Quantity:");
//            if (quantityInput == null || quantityInput.isEmpty()) {
//                JOptionPane.showMessageDialog(this, "Quantity is required.");
//                return;
//            }
//            int quantity = Integer.parseInt(quantityInput);
//
//            // Create a new order item
//            OrderItem item = currentOrder.newOrderItem(selectedproduct, actualPrice, quantity);
//
//            // Add the new order item to the table
//            Object[] row = new Object[5];
//            row[0] = String.valueOf(item.getSelectedProduct());
//            row[1] = String.valueOf(item.getActualPrice());
//            row[2] = String.valueOf(item.getQuantity());
//            row[3] = String.valueOf(item.getOrderItemTotal());
//
//            ((DefaultTableModel) OrderItemsTable.getModel()).addRow(row);
//
//            JOptionPane.showMessageDialog(this, "Product added to order successfully.");
//        } catch (NumberFormatException e) {
//            JOptionPane.showMessageDialog(this, "Please enter valid numeric values for price and quantity.");
//        }

    }//GEN-LAST:event_addToCartBtnAddProductItemActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable PatientHistoryTable;
    private javax.swing.JComboBox<String> SuppliersComboBox;
    private javax.swing.JButton addToCartBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblPatient;
    private javax.swing.JLabel lblSuppliers;
    // End of variables declaration//GEN-END:variables
}
